import React, { useState, useEffect } from 'react';
import { Construction, X, AlertTriangle, Check, Eye, EyeOff } from 'lucide-react';
import { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';

const ConstructionAlertsManager = () => {
  const [ignoredAlerts, setIgnoredAlerts] = useState([]);
  const [showAlertsMenu, setShowAlertsMenu] = useState(false);
  const [showConfirmDialog, setShowConfirmDialog] = useState(false);
  const [selectedAlert, setSelectedAlert] = useState(null);

  // Estrutura de dados para alerta ignorado
  const IgnoredAlertData = {
    id: '',
    roadName: '',
    location: {
      start: '',
      end: ''
    },
    officialAlertDate: null,
    dateIgnored: null,
    reason: '',
    status: '', // 'obra_finalizada', 'informacao_incorreta', etc
    lastVerified: null,
    notes: ''
  };

  // Menu de Alertas Ignorados
  const IgnoredAlertsMenu = () => (
    <div className="absolute right-0 top-0 h-screen w-80 bg-gray-900 p-4 shadow-lg">
      <div className="flex justify-between items-center mb-4">
        <div>
          <h2 className="text-xl font-bold text-white">Alertas Ignorados</h2>
          <p className="text-sm text-gray-400">Obras marcadas como finalizadas</p>
        </div>
        <button onClick={() => setShowAlertsMenu(false)} className="text-gray-400">
          <X size={20} />
        </button>
      </div>

      <div className="space-y-4 overflow-y-auto max-h-[calc(100vh-100px)]">
        {ignoredAlerts.map((alert) => (
          <div key={alert.id} className="bg-gray-800 p-4 rounded-lg">
            <div className="flex justify-between items-start">
              <div className="flex-1">
                <div className="flex items-center space-x-2">
                  <Construction className="text-orange-500" size={16} />
                  <h3 className="text-white font-medium">{alert.roadName}</h3>
                </div>
                
                <div className="mt-2 text-sm">
                  <p className="text-gray-400">
                    Trecho: {alert.location.start} até {alert.location.end}
                  </p>
                  <p className="text-gray-400 mt-1">
                    Alerta oficial: {new Date(alert.officialAlertDate).toLocaleDateString()}
                  </p>
                  <p className="text-gray-400">
                    Ignorado em: {new Date(alert.dateIgnored).toLocaleDateString()}
                  </p>
                </div>

                <div className="mt-2">
                  <span className={`px-2 py-1 rounded text-xs ${
                    alert.status === 'obra_finalizada' ? 'bg-green-900 text-green-300' :
                    'bg-orange-900 text-orange-300'
                  }`}>
                    {alert.status === 'obra_finalizada' ? 'Obra Finalizada' : 'Informação Incorreta'}
                  </span>
                </div>

                {alert.notes && (
                  <p className="text-sm text-gray-300 mt-2 bg-gray-700 p-2 rounded">
                    {alert.notes}
                  </p>
                )}
              </div>

              <button 
                onClick={() => stopIgnoringAlert(alert.id)}
                className="text-gray-400 hover:text-gray-300 ml-2"
              >
                <EyeOff size={16} />
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );

  // Diálogo de confirmação para ignorar alerta
  const IgnoreAlertDialog = () => (
    <Alert className="absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 bg-gray-900 border-orange-600">
      <Construction className="text-orange-600" />
      <AlertTitle className="text-white">Ignorar Alerta de Obra</AlertTitle>
      <AlertDescription>
        <div className="space-y-4 mt-4">
          <div>
            <label className="text-gray-300 text-sm">Nome da Rodovia</label>
            <input 
              type="text"
              className="w-full mt-1 bg-gray-800 text-white rounded p-2"
              value={selectedAlert?.roadName || ''}
              onChange={(e) => setSelectedAlert({...selectedAlert, roadName: e.target.value})}
            />
          </div>

          <div>
            <label className="text-gray-300 text-sm">Início do Trecho</label>
            <input 
              type="text"
              className="w-full mt-1 bg-gray-800 text-white rounded p-2"
              value={selectedAlert?.location?.start || ''}
              onChange={(e) => setSelectedAlert({
                ...selectedAlert, 
                location: {...selectedAlert?.location, start: e.target.value}
              })}
            />
          </div>

          <div>
            <label className="text-gray-300 text-sm">Fim do Trecho</label>
            <input 
              type="text"
              className="w-full mt-1 bg-gray-800 text-white rounded p-2"
              value={selectedAlert?.location?.end || ''}
              onChange={(e) => setSelectedAlert({
                ...selectedAlert, 
                location: {...selectedAlert?.location, end: e.target.value}
              })}
            />
          </div>

          <div>
            <label className="text-gray-300 text-sm">Status</label>
            <select 
              className="w-full mt-1 bg-gray-800 text-white rounded p-2"
              value={selectedAlert?.status || ''}
              onChange={(e) => setSelectedAlert({...selectedAlert, status: e.target.value})}
            >
              <option value="">Selecione...</option>
              <option value="obra_finalizada">Obra Finalizada</option>
              <option value="informacao_incorreta">Informação Incorreta</option>
            </select>
          </div>

          <div>
            <label className="text-gray-300 text-sm">Observações (opcional)</label>
            <textarea 
              className="w-full mt-1 bg-gray-800 text-white rounded p-2"
              rows="3"
              value={selectedAlert?.notes || ''}
              onChange={(e) => setSelectedAlert({...selectedAlert, notes: e.target.value})}
            />
          </div>
        </div>

        <div className="mt-6 flex justify-end space-x-3">
          <button 
            onClick={() => setShowConfirmDialog(false)}
            className="px-4 py-2 bg-gray-700 rounded text-white"
          >
            Cancelar
          </button>
          <button 
            onClick={confirmIgnoreAlert}
            className="px-4 py-2 bg-orange-600 rounded text-white flex items-center space-x-2"
          >
            <EyeOff size={16} />
            <span>Ignorar Alerta</span>
          </button>
        </div>
      </AlertDescription>
    </Alert>
  );

  // Adicionar alerta à lista de ignorados
  const confirmIgnoreAlert = () => {
    if (!selectedAlert?.roadName) return;

    const newAlert = {
      ...IgnoredAlertData,
      ...selectedAlert,
      id: Date.now().toString(),
      dateIgnored: new Date(),
      officialAlertDate: new Date(), // Deve vir do sistema oficial
      lastVerified: new Date()
    };

    setIgnoredAlerts([...ignoredAlerts, newAlert]);
    setShowConfirmDialog(false);
    setSelectedAlert(null);
  };

  // Parar de ignorar um alerta
  const stopIgnoringAlert = (alertId) => {
    setIgnoredAlerts(ignoredAlerts.filter(alert => alert.id !== alertId));
  };

  // Botão flutuante do menu
  const MenuButton = () => (
    <button 
      onClick={() => setShowAlertsMenu(true)}
      className="fixed bottom-36 right-4 w-12 h-12 bg-orange-600 rounded-full flex items-center justify-center shadow-lg"
    >
      <Construction className="text-white" />
    </button>
  );

  // Botão para adicionar novo alerta ignorado
  const AddAlertButton = () => (
    <button 
      onClick={() => {
        setSelectedAlert({...IgnoredAlertData});
        setShowConfirmDialog(true);
      }}
      className="fixed bottom-4 right-4 bg-orange-600 text-white px-4 py-2 rounded-lg flex items-center space-x-2"
    >
      <EyeOff size={16} />
      <span>Ignorar Nova Obra</span>
    </button>
  );

  return (
    <div className="relative">
      {/* Menu de alertas ignorados */}
      {showAlertsMenu && <IgnoredAlertsMenu />}

      {/* Diálogo de confirmação */}
      {showConfirmDialog && <IgnoreAlertDialog />}

      {/* Botões */}
      <MenuButton />
      {showAlertsMenu && <AddAlertButton />}
    </div>
  );
};

export default ConstructionAlertsManager;