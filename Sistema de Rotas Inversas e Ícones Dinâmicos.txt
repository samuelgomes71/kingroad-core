// Sistema de Rotas Inversas e Ícones
// app/src/main/kotlin/com/kingroad/routing

class ReverseRouteManager(
    private val routeService: RouteService,
    private val restrictionService: RestrictionService,
    private val poiManager: POIManager
) {
    suspend fun calculateReverseRoute(originalRoute: Route): Route {
        // Inverter pontos de origem e destino
        val reversedWaypoints = originalRoute.waypoints.reversed()
        
        // Tentar manter as mesmas vias quando possível
        val preferredRoads = originalRoute.segments
            .map { it.roadId }
            .filter { isBidirectional(it) }
        
        return routeService.calculateRoute(
            waypoints = reversedWaypoints,
            preferences = RoutePreferences(
                preferredRoads = preferredRoads,
                vehicleType = originalRoute.vehicleType,
                restrictions = getReversedRestrictions(originalRoute)
            )
        )
    }
    
    private suspend fun isBidirectional(roadId: String): Boolean {
        return routeService.getRoadInfo(roadId).isBidirectional
    }
    
    private suspend fun getReversedRestrictions(route: Route): List<Restriction> {
        return restrictionService.getRestrictions(
            route = route,
            direction = Direction.REVERSE
        )
    }
}

// Gerenciador de Ícones Dinâmicos
class DynamicIconManager(
    private val database: LocalDatabase,
    private val iconStorage: IconStorage
) {
    // Mapeamento de marcas conhecidas
    private val knownBrands = mapOf(
        "FLYING_J" to "flying_j_icon",
        "TA" to "ta_icon",
        "PETRO" to "petro_icon",
        "SHELL" to "shell_icon",
        "BP" to "bp_icon",
        "TOTAL" to "total_icon",
        "IRVING" to "irving_icon"
    )
    
    // Informações de POI com marca
    data class BrandedPOI(
        val poiId: String,
        val brand: String,
        val type: POIType,
        val fuelTypes: List<FuelType>,
        val fuelPrices: Map<FuelType, Double>,
        val acceptedCards: List<FuelCard>
    )
    
    enum class FuelType {
        DIESEL,
        DEF,
        GASOLINE
    }
    
    enum class FuelCard {
        COMDATA,
        EFS,
        PILOT,
        TA,
        FLYING_J,
        SHELL_FLEET,
        BP_FLEET
    }
    
    // Obter ícone apropriado para POI
    suspend fun getIconForPOI(poi: BrandedPOI): String {
        return when {
            knownBrands.containsKey(poi.brand) -> knownBrands[poi.brand]!!
            poi.fuelTypes.isNotEmpty() -> getFuelBrandIcon(poi.brand)
            else -> getDefaultIcon(poi.type)
        }
    }
    
    // Sistema de ícones personalizados
    suspend fun addCustomIcon(
        iconId: String,
        iconData: ByteArray,
        category: IconCategory
    ) {
        iconStorage.saveIcon(
            IconData(
                id = iconId,
                data = iconData,
                category = category,
                timestamp = System.currentTimeMillis()
            )
        )
        
        database.updateIconMapping(iconId, category)
    }
    
    suspend fun replaceIcon(
        originalIconId: String,
        newIconData: ByteArray
    ) {
        val originalIcon = iconStorage.getIcon(originalIconId)
        iconStorage.saveIcon(
            IconData(
                id = originalIconId,
                data = newIconData,
                category = originalIcon.category,
                timestamp = System.currentTimeMillis()
            )
        )
    }
}

// Interface de armazenamento de ícones
interface IconStorage {
    suspend fun saveIcon(icon: IconData)
    suspend fun getIcon(iconId: String): IconData
    suspend fun listIcons(category: IconCategory): List<IconData>
    suspend fun deleteIcon(iconId: String)
}

// Dados de ícone
data class IconData(
    val id: String,
    val data: ByteArray,
    val category: IconCategory,
    val timestamp: Long
)

enum class IconCategory {
    TRUCK_STOP,
    FUEL_BRAND,
    MENU,
    CUSTOM
}

// Extensão do POIManager para informações de combustível
interface FuelPriceProvider {
    suspend fun getFuelPrices(poiId: String): Map<FuelType, Double>
    suspend fun getAcceptedCards(poiId: String): List<FuelCard>
    suspend fun updateFuelPrice(
        poiId: String,
        fuelType: FuelType,
        price: Double
    )
}