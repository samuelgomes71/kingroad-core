data class FuelDistributor(
    val id: String,
    val name: String,
    val company: String,
    val location: Location,
    val address: String,
    val country: String,
    val loadingPoints: List<LoadingPoint>,
    val operatingHours: OperatingHours,
    val contact: ContactInfo,
    val facilities: DistributorFacilities,
    val securityRequirements: SecurityRequirements,
    val fuelTypes: List<FuelType>,
    val queueStatus: QueueStatus = QueueStatus(),
    val lastUpdate: Long = System.currentTimeMillis()
)

data class Location(
    val latitude: Double,
    val longitude: Double,
    val accessRoutes: List<AccessRoute>
)

data class AccessRoute(
    val name: String,
    val type: RouteType,
    val restrictions: List<RouteRestriction>,
    val recommendedForTrucks: Boolean,
    val instructions: String
)

enum class RouteType {
    MAIN_ENTRANCE,
    TRUCK_ENTRANCE,
    LOADING_ENTRANCE,
    EMERGENCY_EXIT
}

data class RouteRestriction(
    val type: RestrictionType,
    val value: String
)

enum class RestrictionType {
    HEIGHT,
    WIDTH,
    WEIGHT,
    TIME_WINDOW,
    SPECIAL_PERMIT
}

data class LoadingPoint(
    val id: String,
    val name: String,
    val type: FuelLoadingType,
    val capacity: Int,  // número de caminhões simultaneamente
    val fuelTypes: List<FuelType>,
    val status: LoadingPointStatus = LoadingPointStatus.OPERATIONAL,
    val currentQueue: Int = 0,
    val estimatedWaitTime: Int = 0  // minutos
)

enum class FuelLoadingType {
    TOP_LOADING,       // Carregamento por cima
    BOTTOM_LOADING,    // Carregamento por baixo
    DUAL_LOADING      // Ambos os tipos
}

enum class LoadingPointStatus {
    OPERATIONAL,
    BUSY,
    MAINTENANCE,
    CLOSED
}

data class FuelType(
    val name: String,
    val code: String,
    val isAvailable: Boolean = true,
    val specialRequirements: List<String> = listOf()
)

data class QueueStatus(
    val totalTrucks: Int = 0,
    val averageWaitTime: Int = 0,  // minutos
    val lastUpdate: Long = System.currentTimeMillis()
)

data class OperatingHours(
    val loadingHours: Schedule,
    val officeHours: Schedule,
    val specialInstructions: String? = null
)

data class Schedule(
    val weekday: TimeRange,
    val saturday: TimeRange?,
    val sunday: TimeRange?,
    val holidays: TimeRange?
)

data class TimeRange(
    val start: String,  // formato "HH:mm"
    val end: String     // formato "HH:mm"
)

data class ContactInfo(
    val loadingDock: String?,
    val office: String?,
    val emergency: String?,
    val email: String?,
    val specialInstructions: String?
)

data class DistributorFacilities(
    val hasDriverRoom: Boolean = false,
    val hasRestroom: Boolean = false,
    val hasParking: Boolean = false,
    val parkingCapacity: Int = 0,
    val hasWaitingArea: Boolean = false,
    val hasCafeteria: Boolean = false,
    val hasShowers: Boolean = false,
    val hasWifi: Boolean = false,
    val hasGasStation: Boolean = false,
    val hasCalibrationService: Boolean = false
)

data class SecurityRequirements(
    val requiresPreRegistration: Boolean = true,
    val requiresIdentification: Boolean = true,
    val requiresVehicleInspection: Boolean = true,
    val requiresLoadingTraining: Boolean = false,
    val specialDocuments: List<String> = listOf(),
    val instructions: String? = null
)

class FuelDistributorService(
    private val vehiclePOIService: VehicleSpecificPOIService
) {
    private val distributors = mutableMapOf<String, FuelDistributor>()
    
    fun addDistributor(distributor: FuelDistributor) {
        distributors[distributor.id] = distributor
    }
    
    fun updateQueueStatus(
        distributorId: String,
        loadingPointId: String,
        currentQueue: Int,
        estimatedWaitTime: Int
    ) {
        distributors[distributorId]?.let { distributor ->
            val updatedLoadingPoints = distributor.loadingPoints.map { point ->
                if (point.id == loadingPointId) {
                    point.copy(
                        currentQueue = currentQueue,
                        estimatedWaitTime = estimatedWaitTime
                    )
                } else point
            }
            
            val totalTrucks = updatedLoadingPoints.sumOf { it.currentQueue }
            val avgWaitTime = if (totalTrucks > 0) {
                updatedLoadingPoints.sumOf { it.estimatedWaitTime } / updatedLoadingPoints.size
            } else 0
            
            distributors[distributorId] = distributor.copy(
                loadingPoints = updatedLoadingPoints,
                queueStatus = QueueStatus(
                    totalTrucks = totalTrucks,
                    averageWaitTime = avgWaitTime,
                    lastUpdate = System.currentTimeMillis()
                )
            )
        }
    }
    
    fun getNearbyDistributors(
        latitude: Double,
        longitude: Double,
        radiusKm: Double = 100.0,
        vehicleConfig: VehicleConfiguration,
        company: String? = null,
        fuelType: String? = null,
        filters: DistributorFilters = DistributorFilters()
    ): List<FuelDistributor> {
        // Validação de tipo de veículo
        if (!vehiclePOIService.shouldShowPOI(POIType.FUEL_DISTRIBUTOR, vehicleConfig)) {
            return emptyList()
        }

        return distributors.values.filter { distributor ->
            // Verifica distância
            val distance = calculateDistance(
                latitude, longitude,
                distributor.location.latitude, distributor.location.longitude
            )
            
            if (distance > radiusKm) return@filter false
            if (company != null && distributor.company != company) return@filter false
            if (fuelType != null && !distributor.fuelTypes.any { it.code == fuelType }) return@filter false
            
            // Aplica filtros
            if (filters.maxQueueTime > 0 && distributor.queueStatus.averageWaitTime > filters.maxQueueTime) {
                return@filter false
            }
            if (filters.requiresParking && !distributor.facilities.hasParking) return@filter false
            if (filters.requiresShowers && !distributor.facilities.hasShowers) return@filter false
            if (filters.operationalOnly && 
                !distributor.loadingPoints.any { it.status == LoadingPointStatus.OPERATIONAL }) {
                return@filter false
            }
            
            true
        }.sortedBy { distributor ->
            calculateDistance(
                latitude, longitude,
                distributor.location.latitude, distributor.location.longitude
            )
        }
    }

    data class DistributorFilters(
        val maxQueueTime: Int = 0,  // minutos
        val requiresParking: Boolean = false,
        val requiresShowers: Boolean = false,
        val operationalOnly: Boolean = true
    )

    private fun calculateDistance(
        lat1: Double, lon1: Double,
        lat2: Double, lon2: Double
    ): Double {
        val R = 6371.0 // Raio da Terra em km
        val dLat = Math.toRadians(lat2 - lat1)
        val dLon = Math.toRadians(lon2 - lon1)
        val a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(Math.toRadians(lat1)) * Math.cos(Math.toRadians(lat2)) *
                Math.sin(dLon/2) * Math.sin(dLon/2)
        val c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a))
        return R * c
    }

    // Exemplo de dados para teste
    fun initializeTestData() {
        // Petrobras - São Paulo
        addDistributor(
            FuelDistributor(
                id = "petrobras_sp1",
                name = "Base Petrobras São Paulo",
                company = "Petrobras",
                location = Location(
                    latitude = -23.5505,
                    longitude = -46.6333,
                    accessRoutes = listOf(
                        AccessRoute(
                            name = "Entrada Principal",
                            type = RouteType.TRUCK_ENTRANCE,
                            restrictions = listOf(),
                            recommendedForTrucks = true,
                            instructions = "Siga placas para 'Carregamento'"
                        )
                    )
                ),
                address = "Av. Industrial, 1000, São Paulo, SP",
                country = "BR",
                loadingPoints = listOf(
                    LoadingPoint(
                        id = "sp1_b1",
                        name = "Baia 1",
                        type = FuelLoadingType.TOP_LOADING,
                        capacity = 2,
                        fuelTypes = listOf(
                            FuelType("Diesel S10", "DS10"),
                            FuelType("Diesel S500", "DS500")
                        ),
                        currentQueue = 3,
                        estimatedWaitTime = 45
                    )
                ),
                operatingHours = OperatingHours(
                    loadingHours = Schedule(
                        weekday = TimeRange("00:00", "23:59"),
                        saturday = TimeRange("00:00", "23:59"),
                        sunday = TimeRange("00:00", "23:59"),
                        holidays = TimeRange("00:00", "23:59")
                    ),
                    officeHours = Schedule(
                        weekday = TimeRange("08:00", "17:00"),
                        saturday = TimeRange("08:00", "12:00"),
                        sunday = null,
                        holidays = null
                    )
                ),
                contact = ContactInfo(
                    loadingDock = "+55 11 1234-5678",
                    office = "+55 11 1234-5679",
                    emergency = "190",
                    email = "base.sp@petrobras.com.br",
                    specialInstructions = "Chegue 30min antes do horário agendado"
                ),
                facilities = DistributorFacilities(
                    hasDriverRoom = true,
                    hasRestroom = true,
                    hasParking = true,
                    parkingCapacity = 30,
                    hasWaitingArea = true,
                    hasCafeteria = true,
                    hasShowers = true,
                    hasWifi = true,
                    hasGasStation = true,
                    hasCalibrationService = true
                ),
                securityRequirements = SecurityRequirements(
                    requiresPreRegistration = true,
                    requiresIdentification = true,
                    requiresVehicleInspection = true,
                    requiresLoadingTraining = true,
                    specialDocuments = listOf(
                        "MOPP",
                        "Ordem de Carregamento",
                        "CNH Categoria E",
                        "Certificado de Inspeção Veicular"
                    )
                ),
                fuelTypes = listOf(
                    FuelType("Diesel S10", "DS10"),
                    FuelType("Diesel S500", "DS500")
                )
            )
        )
    }
}