import React, { useState } from 'react';
import { Map, Satellite, Mountain } from 'lucide-react';

const MapModeToggleButton = ({ onModeChange }) => {
  const [currentMode, setCurrentMode] = useState('standard');
  
  const modes = [
    { id: 'standard', icon: Map, label: 'Normal', color: 'bg-blue-500' },
    { id: 'satellite', icon: Satellite, label: 'Satélite', color: 'bg-green-600' },
    { id: 'terrain', icon: Mountain, label: 'Relevo', color: 'bg-amber-700' }
  ];
  
  const handleModeChange = () => {
    const currentIndex = modes.findIndex(mode => mode.id === currentMode);
    const nextIndex = (currentIndex + 1) % modes.length;
    const nextMode = modes[nextIndex].id;
    
    setCurrentMode(nextMode);
    onModeChange(nextMode);
  };
  
  const currentModeObj = modes.find(mode => mode.id === currentMode);
  
  return (
    <div className="absolute right-4 top-24 z-10">
      <div className="flex flex-col items-center">
        <button
          onClick={handleModeChange}
          className={`${currentModeObj.color} hover:opacity-90 text-white w-12 h-12 rounded-full shadow-lg flex items-center justify-center relative`}
          aria-label={`Alternar para modo ${currentModeObj.label}`}
        >
          {React.createElement(currentModeObj.icon, { size: 24 })}
        </button>
        <span className="mt-1 text-xs font-medium bg-white px-2 py-1 rounded-full shadow text-gray-700">
          {currentModeObj.label}
        </span>
      </div>
    </div>
  );
};

// Versão expandida para a tela de busca
const AdvancedMapModeSelector = ({ onModeChange }) => {
  const [currentMode, setCurrentMode] = useState('standard');
  
  const modes = [
    { id: 'standard', icon: Map, label: 'Normal', color: 'bg-blue-500', description: 'Visualização de ruas e estradas' },
    { id: 'satellite', icon: Satellite, label: 'Satélite', color: 'bg-green-600', description: 'Visualização de imagens de satélite' },
    { id: 'terrain', icon: Mountain, label: 'Relevo', color: 'bg-amber-700', description: 'Visualização com topografia e elevação' },
    { id: 'hybrid', icon: Map, label: 'Híbrido', color: 'bg-purple-600', description: 'Satélite com nomes de ruas' }
  ];
  
  const handleModeSelect = (modeId) => {
    setCurrentMode(modeId);
    onModeChange(modeId);
  };
  
  return (
    <div className="bg-white rounded-lg shadow-lg p-2 mb-4">
      <div className="grid grid-cols-4 gap-2">
        {modes.map(mode => (
          <button
            key={mode.id}
            onClick={() => handleModeSelect(mode.id)}
            className={`p-2 rounded-lg flex flex-col items-center ${
              currentMode === mode.id 
                ? `${mode.color} text-white` 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            {React.createElement(mode.icon, { size: 20 })}
            <span className="text-xs mt-1 font-medium">{mode.label}</span>
          </button>
        ))}
      </div>
      
      <div className="mt-2 text-xs text-gray-600 px-2">
        {modes.find(m => m.id === currentMode)?.description}
      </div>
    </div>
  );
};

// Componente para visualização em modo satélite com controles avançados
const SatelliteViewControls = ({ onZoomChange, onTiltChange, currentMode }) => {
  const isSatelliteMode = ['satellite', 'hybrid'].includes(currentMode);
  
  if (!isSatelliteMode) return null;
  
  return (
    <div className="absolute left-4 bottom-24 z-10">
      <div className="bg-white bg-opacity-80 rounded-lg shadow-lg p-3">
        <div className="mb-3">
          <label className="text-xs text-gray-700 block mb-1">Zoom</label>
          <input 
            type="range" 
            min="12" 
            max="22" 
            defaultValue="18"
            onChange={(e) => onZoomChange(Number(e.target.value))}
            className="w-32"
          />
        </div>
        
        <div>
          <label className="text-xs text-gray-700 block mb-1">Inclinação</label>
          <input 
            type="range" 
            min="0" 
            max="60" 
            defaultValue="0"
            onChange={(e) => onTiltChange(Number(e.target.value))}
            className="w-32"
          />
        </div>
      </div>
    </div>
  );
};

export { MapModeToggleButton, AdvancedMapModeSelector, SatelliteViewControls };