// Sistema de Pontos de Parada e Turismo para Ônibus
// app/src/main/kotlin/com/kingroad/bus

class BusStopManager(
    private val poiManager: POIManager,
    private val userDataService: UserDataService,
    private val tourismService: TourismService
) {
    data class BusStop(
        val id: String,
        val location: Location,
        val type: BusStopType,
        val facilities: BusFacilities,
        val reviews: List<BusStopReview>,
        val addedBy: String? = null,
        val lastVerified: Long = System.currentTimeMillis()
    )

    enum class BusStopType {
        OFFICIAL,           // Paradas oficiais
        TOURISM,           // Pontos turísticos
        REST_AREA,         // Áreas de descanso
        PARKING,           // Estacionamentos
        CUSTOM,            // Adicionado por usuário
        RESTAURANT,        // Restaurantes adequados
        HOTEL              // Hotéis com estrutura
    }

    data class BusFacilities(
        val parkingSpots: Int,
        val maxBusLength: Double,
        val overnightParking: Boolean,
        val facilities: List<Facility>,
        val accessibility: Boolean,
        val securityFeatures: List<SecurityFeature>,
        val restrictions: List<Restriction>
    )

    data class TouristAttraction(
        val id: String,
        val name: String,
        val type: AttractionType,
        val busAccess: BusAccess,
        val visitDuration: Duration,
        val reviews: List<TourReview>,
        val seasonality: List<Season>,
        val popularTimes: Map<DayOfWeek, List<Hour>>
    )

    // Adicionar novo ponto de parada
    suspend fun addCustomBusStop(
        location: Location,
        details: BusStopDetails,
        photos: List<Photo>
    ): BusStop {
        // Validar localização
        validateBusStopLocation(location)
        
        // Criar ponto de parada
        val busStop = BusStop(
            id = generateId(),
            location = location,
            type = BusStopType.CUSTOM,
            facilities = details.facilities,
            addedBy = getCurrentUserId()
        )
        
        // Salvar fotos
        photos.forEach { photo ->
            userDataService.savePhoto(busStop.id, photo)
        }
        
        // Salvar no banco de dados
        poiManager.saveBusStop(busStop)
        
        return busStop
    }

    // Encontrar pontos de parada próximos
    suspend fun findNearbyStops(
        location: Location,
        radius: Double,
        filters: BusStopFilters
    ): List<BusStop> {
        return poiManager.findNearbyPOIs(location, radius)
            .filterByType(filters.types)
            .filterByFacilities(filters.requiredFacilities)
            .sortByRelevance()
    }

    // Gerenciar pontos turísticos
    suspend fun findTouristAttractions(
        area: Area,
        preferences: TourPreferences
    ): List<TouristAttraction> {
        return tourismService.findAttractions(area)
            .filter { it.busAccess.isAccessible }
            .filter { it.meetsPreferences(preferences) }
            .sortedBy { it.popularity }
    }

    // Planejar rota turística
    suspend fun planTourRoute(
        attractions: List<TouristAttraction>,
        timeAvailable: Duration,
        preferences: TourPreferences
    ): TourPlan {
        // Otimizar sequência de visitas
        val optimizedSequence = optimizeTourSequence(
            attractions = attractions,
            timeAvailable = timeAvailable
        )
        
        // Calcular paradas necessárias
        val requiredStops = calculateRequiredStops(
            attractions = optimizedSequence,
            preferences = preferences
        )
        
        return TourPlan(
            attractions = optimizedSequence,
            stops = requiredStops,
            totalDuration = calculateTotalDuration(optimizedSequence),
            route = createOptimizedRoute(optimizedSequence, requiredStops)
        )
    }

    // Validar localização para ônibus
    private suspend fun validateBusStopLocation(location: Location) {
        val roadInfo = poiManager.getRoadInfo(location)
        
        require(roadInfo.width >= MIN_ROAD_WIDTH) {
            "Via muito estreita para ônibus"
        }
        
        require(roadInfo.turningRadius >= MIN_TURNING_RADIUS) {
            "Raio de curva insuficiente"
        }
        
        require(!roadInfo.isResidentialArea) {
            "Área residencial não adequada para parada de ônibus"
        }
    }

    companion object {
        const val MIN_ROAD_WIDTH = 3.5 // metros
        const val MIN_TURNING_RADIUS = 12.0 // metros
        const val MIN_PARKING_LENGTH = 15.0 // metros
    }
}

// Classes de suporte
data class TourPlan(
    val attractions: List<TouristAttraction>,
    val stops: List<BusStop>,
    val totalDuration: Duration,
    val route: Route
)

data class BusAccess(
    val isAccessible: Boolean,
    val parkingDistance: Double,
    val dropOffPoint: Location?,
    val restrictions: List<Restriction>,
    val bestAccessTimes: List<TimeRange>
)

enum class AttractionType {
    MONUMENT,
    MUSEUM,
    PARK,
    HISTORICAL_SITE,
    NATURAL_LANDMARK,
    ENTERTAINMENT,
    SHOPPING
}

enum class Facility {
    RESTROOM,
    RESTAURANT,
    SHOP,
    WIFI,
    CHARGING_STATION,
    WATER_SUPPLY,
    DUMPING_STATION
}

enum class SecurityFeature {
    CCTV,
    NIGHT_LIGHTING,
    SECURITY_STAFF,
    FENCED_AREA,
    ACCESS_CONTROL
}