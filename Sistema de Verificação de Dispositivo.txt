// Sistema de Verificação de Dispositivo
// app/src/main/kotlin/com/kingroad/setup

class DeviceCheckManager(
    private val deviceManager: DeviceManager,
    private val gpsManager: GPSManager,
    private val networkManager: NetworkManager,
    private val storageManager: StorageManager
) {
    data class DeviceSpecs(
        val ram: Long,              // RAM total em bytes
        val availableRam: Long,     // RAM disponível
        val storage: Long,          // Armazenamento total
        val availableStorage: Long, // Armazenamento disponível
        val processor: ProcessorInfo,
        val gpsCapabilities: GPSCapabilities,
        val networkCapabilities: NetworkCapabilities,
        val screenSpecs: ScreenSpecs
    )

    data class GPSCapabilities(
        val hasGPS: Boolean,
        val hasAGPS: Boolean,
        val hasGLONASS: Boolean,
        val accuracy: GPSAccuracy,
        val refreshRate: Int        // Hz
    )

    enum class GPSAccuracy {
        HIGH,      // < 3 metros
        MEDIUM,    // 3-10 metros
        LOW,       // > 10 metros
        UNKNOWN
    }

    data class NetworkCapabilities(
        val has4G: Boolean,
        val has5G: Boolean,
        val hasWifi: Boolean,
        val hasBluetooth: Boolean,
        val signalStrength: Int     // dBm
    )

    // Verificar dispositivo
    suspend fun checkDevice(): DeviceCompatibility {
        val specs = getDeviceSpecs()
        return analyzeCompatibility(specs)
    }

    // Obter especificações do dispositivo
    private suspend fun getDeviceSpecs(): DeviceSpecs {
        return DeviceSpecs(
            ram = deviceManager.getTotalRAM(),
            availableRam = deviceManager.getAvailableRAM(),
            storage = deviceManager.getTotalStorage(),
            availableStorage = deviceManager.getAvailableStorage(),
            processor = deviceManager.getProcessorInfo(),
            gpsCapabilities = checkGPSCapabilities(),
            networkCapabilities = checkNetworkCapabilities(),
            screenSpecs = deviceManager.getScreenSpecs()
        )
    }

    // Verificar GPS
    private suspend fun checkGPSCapabilities(): GPSCapabilities {
        // Testar GPS
        val gpsTest = gpsManager.testGPS()
        
        // Verificar precisão
        val accuracy = when {
            gpsTest.accuracy <= 3.0 -> GPSAccuracy.HIGH
            gpsTest.accuracy <= 10.0 -> GPSAccuracy.MEDIUM
            else -> GPSAccuracy.LOW
        }

        return GPSCapabilities(
            hasGPS = gpsTest.hasGPS,
            hasAGPS = gpsTest.hasAGPS,
            hasGLONASS = gpsTest.hasGLONASS,
            accuracy = accuracy,
            refreshRate = gpsTest.refreshRate
        )
    }

    // Verificar rede
    private suspend fun checkNetworkCapabilities(): NetworkCapabilities {
        val networkTest = networkManager.testNetwork()
        
        return NetworkCapabilities(
            has4G = networkTest.has4G,
            has5G = networkTest.has5G,
            hasWifi = networkTest.hasWifi,
            hasBluetooth = networkTest.hasBluetooth,
            signalStrength = networkTest.signalStrength
        )
    }

    // Analisar compatibilidade e ajustar funcionalidades
    private fun analyzeCompatibility(specs: DeviceSpecs): DeviceCompatibility {
        val features = mutableListOf<Feature>()
        val restrictions = mutableListOf<Restriction>()

        // Verificar RAM
        when {
            specs.ram >= 4L * 1024 * 1024 * 1024 -> {  // 4GB
                features.add(Feature.FULL_GRAPHICS)
                features.add(Feature.BACKGROUND_SERVICES)
            }
            specs.ram >= 2L * 1024 * 1024 * 1024 -> {  // 2GB
                features.add(Feature.REDUCED_GRAPHICS)
                restrictions.add(Restriction.LIMITED_BACKGROUND_SERVICES)
            }
            else -> {
                features.add(Feature.MINIMAL_GRAPHICS)
                restrictions.add(Restriction.NO_BACKGROUND_SERVICES)
            }
        }

        // Verificar GPS
        when (specs.gpsCapabilities.accuracy) {
            GPSAccuracy.HIGH -> features.add(Feature.HIGH_PRECISION_NAVIGATION)
            GPSAccuracy.MEDIUM -> features.add(Feature.STANDARD_NAVIGATION)
            else -> {
                features.add(Feature.BASIC_NAVIGATION)
                restrictions.add(Restriction.LIMITED_NAVIGATION_ACCURACY)
            }
        }

        // Verificar armazenamento
        when {
            specs.availableStorage >= 32L * 1024 * 1024 * 1024 -> {  // 32GB
                features.add(Feature.FULL_OFFLINE_MAPS)
            }
            specs.availableStorage >= 16L * 1024 * 1024 * 1024 -> {  // 16GB
                features.add(Feature.PARTIAL_OFFLINE_MAPS)
                restrictions.add(Restriction.LIMITED_OFFLINE_AREAS)
            }
            else -> {
                features.add(Feature.MINIMAL_OFFLINE_MAPS)
                restrictions.add(Restriction.VERY_LIMITED_OFFLINE_AREAS)
            }
        }

        return DeviceCompatibility(
            isCompatible = isDeviceCompatible(specs),
            features = features,
            restrictions = restrictions,
            recommendedSettings = generateRecommendedSettings(specs)
        )
    }

    // Verificar compatibilidade mínima
    private fun isDeviceCompatible(specs: DeviceSpecs): Boolean {
        return specs.ram >= MINIMUM_RAM &&
               specs.availableStorage >= MINIMUM_STORAGE &&
               specs.gpsCapabilities.hasGPS &&
               (specs.networkCapabilities.has4G || specs.networkCapabilities.hasWifi)
    }

    companion object {
        private const val MINIMUM_RAM = 1.5 * 1024 * 1024 * 1024     // 1.5GB
        private const val MINIMUM_STORAGE = 5 * 1024 * 1024 * 1024   // 5GB
    }
}

// Classes de resultado
data class DeviceCompatibility(
    val isCompatible: Boolean,
    val features: List<Feature>,
    val restrictions: List<Restriction>,
    val recommendedSettings: RecommendedSettings
)

enum class Feature {
    FULL_GRAPHICS,
    REDUCED_GRAPHICS,
    MINIMAL_GRAPHICS,
    HIGH_PRECISION_NAVIGATION,
    STANDARD_NAVIGATION,
    BASIC_NAVIGATION,
    FULL_OFFLINE_MAPS,
    PARTIAL_OFFLINE_MAPS,
    MINIMAL_OFFLINE_MAPS,
    BACKGROUND_SERVICES
}

enum class Restriction {
    LIMITED_NAVIGATION_ACCURACY,
    LIMITED_OFFLINE_AREAS,
    VERY_LIMITED_OFFLINE_AREAS,
    LIMITED_BACKGROUND_SERVICES,
    NO_BACKGROUND_SERVICES
}

data class RecommendedSettings(
    val mapQuality: MapQuality,
    val offlineMapSize: Int,
    val updateInterval: Duration,
    val backgroundServices: Boolean
)