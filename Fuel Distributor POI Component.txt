import React, { useState } from 'react';
import { 
  Droplet,
  Clock, 
  Phone, 
  Truck,
  AlertCircle,
  Timer,
  Coffee,
  Wifi,
  X,
  ShieldCheck
} from 'lucide-react';

const FuelDistributorPOI = () => {
  const [selectedDistributor, setSelectedDistributor] = useState(null);
  const [showDetails, setShowDetails] = useState(false);
  const [filters, setFilters] = useState({
    maxQueueTime: 0,
    requiresParking: false,
    requiresShowers: false,
    operationalOnly: true,
    company: '',
    fuelType: ''
  });

  const QueueBadge = ({ minutes }) => {
    const colors = minutes <= 30 
      ? 'bg-green-100 text-green-800'
      : minutes <= 60
      ? 'bg-yellow-100 text-yellow-800'
      : 'bg-red-100 text-red-800';

    return (
      <span className={`px-2 py-1 rounded-full text-sm ${colors}`}>
        {minutes} min espera
      </span>
    );
  };

  const StatusBadge = ({ status }) => {
    const colors = {
      OPERATIONAL: 'bg-green-100 text-green-800',
      BUSY: 'bg-yellow-100 text-yellow-800',
      MAINTENANCE: 'bg-orange-100 text-orange-800',
      CLOSED: 'bg-red-100 text-red-800'
    };

    return (
      <span className={`px-2 py-1 rounded-full text-sm ${colors[status]}`}>
        {status}
      </span>
    );
  };

  const DistributorMarker = ({ distributor, onClick }) => (
    <div 
      className="relative cursor-pointer"
      onClick={() => onClick(distributor)}
    >
      <div className="absolute flex items-center justify-center w-8 h-8 bg-blue-500 rounded-full hover:bg-blue-600">
        <Droplet className="w-5 h-5 text-white" />
      </div>
      {distributor.queueStatus.averageWaitTime > 0 && (
        <div className="absolute -top-2 -right-2 w-5 h-5 bg-yellow-500 rounded-full flex items-center justify-center text-white text-xs">
          {Math.ceil(distributor.queueStatus.averageWaitTime / 15)}
        </div>
      )}
    </div>
  );

  const DistributorDetails = ({ distributor }) => (
    <div className="bg-white rounded-lg shadow-lg p-4">
      {/* Header */}
      <div className="flex justify-between items-start">
        <div>
          <h3 className="text-xl font-bold">{distributor.name}</h3>
          <p className="text-gray-600">{distributor.address}</p>
        </div>
        <button 
          onClick={() => setShowDetails(false)}
          className="p-1 hover:bg-gray-100 rounded-full"
        >
          <X className="w-5 h-5" />
        </button>
      </div>

      {/* Queue Status */}
      <div className="mt-4 flex items-center justify-between bg-gray-50 p-3 rounded-lg">
        <div>
          <span className="text-sm font-medium">Status da Fila:</span>
          <div className="flex items-center mt-1">
            <Truck className="w-4 h-4 mr-2 text-gray-600" />
            <span>{distributor.queueStatus.totalTrucks} caminhões</span>
          </div>
        </div>
        <QueueBadge minutes={distributor.queueStatus.averageWaitTime} />
      </div>

      {/* Loading Points */}
      <div className="mt-4">
        <h4 className="font-medium mb-2">Baias de Carregamento:</h4>
        <div className="space-y-3">
          {distributor.loadingPoints.map((point, index) => (
            <div key={index} className="bg-gray-50 p-3 rounded-lg">
              <div className="flex justify-between items-start">
                <div>
                  <p className="font-medium">{point.name}</p>
                  <div className="text-sm text-gray-600 mt-1">
                    {point.fuelTypes.map(fuel => fuel.name).join(', ')}
                  </div>
                </div>
                <div className="flex flex-col items-end">
                  <StatusBadge status={point.status} />
                  {point.currentQueue > 0 && (
                    <span className="text-sm mt-1">
                      {point.currentQueue} na fila
                    </span>
                  )}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Operating Hours */}
      <div className="mt-4">
        <h4 className="font-medium mb-2">Horário de Funcionamento:</h4>
        <div className="bg-gray-50 p-3 rounded-lg">
          <div className="space-y-2">
            <div className="flex items-center">
              <Clock className="w-4 h-4 mr-2 text-gray-600" />
              <span>
                {distributor.operatingHours.loadingHours.weekday.start} - 
                {distributor.operatingHours.loadingHours.weekday.end}
              </span>
            </div>
            {distributor.operatingHours.specialInstructions && (
              <p className="text-sm text-gray-600">
                {distributor.operatingHours.specialInstructions}
              </p>
            )}
          </div>
        </div>
      </div>

      {/* Facilities */}
      <div className="mt-4">
        <h4 className="font-medium mb-2">Instalações:</h4>
        <div className="grid grid-cols-3 gap-3">
          {distributor.facilities.hasDriverRoom && (
            <div className="flex items-center">
              <Coffee className="w-4 h-4 mr-1 text-blue-600" />
              <span className="text-sm">Sala Motoristas</span>
            </div>
          )}
          {distributor.facilities.hasWifi && (
            <div className="flex items-center">
              <Wifi className="w-4 h-4 mr-1 text-blue-600" />
              <span className="text-sm">WiFi</span>
            </div>
          )}
          {distributor.facilities.hasCalibrationService && (
            <div className="flex items-center">
              <AlertCircle className="w-4 h-4 mr-1 text-blue-600" />
              <span className="text-sm">Calibração</span>
            </div>
          )}
        </div>
      </div>

      {/* Security Requirements */}
      <div className="mt-4">
        <h4 className="font-medium mb-2">Documentação Necessária:</h4>
        <div className="bg-gray-50 p-3 rounded-lg">
          <div className="space-y-2">
            {distributor.securityRequirements.specialDocuments.map((doc, index) => (
              <div key={index} className="flex items-center">
                <ShieldCheck className="w-4 h-4 mr-2 text-blue-600" />
                <span className="text-sm">{doc}</span>
              </div>
            ))}
          </div>
        </div>
      </div>

      {/* Contact */}
      <div className="mt-4 space-y-2">
        {distributor.contact.loadingDock && (
          <div className="flex items-center">
            <Phone className="w-4 h-4 mr-2 text-gray-600" />
            <a href={`tel:${distributor.contact.loadingDock}`} className="text-blue-600 hover:underline">
              {distributor.contact.loadingDock} (Carregamento)
            </a>
          </div>
        )}
        {distributor.contact.emergency && (
          <div className="flex items-center">
            <AlertCircle className="w-4 h-4 mr-2 text-red-600" />
            <a href={`tel:${distributor.contact.emergency}`} className="text-red-600 hover:underline">
              {distributor.contact.emergency} (Emergência)
            </a>
          </div>
        )}
      </div>
    </div>
  );

  return (
    <div className="relative">
      {/* Filters */}
      <div className="absolute top-4 left-4 bg-white rounded-lg shadow-lg p-4 z-10">
        <h3 className="font-bold mb-3">Filtrar Distribuidoras</h3>
        <div className="space-y-2">
          <select
            value={filters.company}
            onChange={(e) => setFilters({...filters, company: e.target.value})}
            className="w-full p-2 border rounded"
          >
            <option value="">Todas as Empresas</option>
            <option value="Petrobras">Petrobras</option>
            <option value="Shell">Shell</option>
            <option value="BP">BP</option>
          </select>

          <select
            value={filters.fuelType}
            onChange={(e) => setFilters({...filters, fuelType: e.target.value})}
            className="w-full p-2 border rounded"
          >
            <option value="">Todos os Combustíveis</option>
            <option value="DS10">Diesel S10</option>
            <option value="DSL">Diesel Comum</option>
            <option value="GAS">Gasolina</option>
            <option value="ETH">Etanol</option>
          </select>

          <label className="flex items-center space-x-2">
            <input 
              type="checkbox"
              checked={filters.operationalOnly}
              onChange={(e) => setFilters({...filters, operationalOnly: e.target.checked})}
              className="form-checkbox"
            />
            <span>Apenas Operacionais</span>
          </label>

          <div>
            <label className="text-sm font-medium">Tempo Máximo de Espera:</label>
            <input
              type="range"
              min="0"
              max="120"
              step="15"
              value={filters.maxQueueTime}
              onChange={(e) => setFilters({...filters, maxQueueTime: parseInt(e.target.value)})}
              className="w-full mt-1"
            />
            <div className="text-sm text-gray-600 text-right">
              {filters.maxQueueTime > 0 ? `${filters.maxQueueTime} minutos` : 'Sem limite'}
            </div>
          </div>
        </div>
      </div>

      {/* Distributor Details */}
      {selectedDistributor && showDetails && (
        <div className="absolute bottom-4 left-4 right-4 z-10">
          <DistributorDetails distributor={selectedDistributor} />
        </div>
      )}
    </div>
  );
};

export default FuelDistributorPOI;