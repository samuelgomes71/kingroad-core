import android.content.Context
import android.graphics.Color
import android.os.Bundle
import android.view.Gravity
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.FrameLayout
import android.widget.ImageButton
import android.widget.ImageView
import android.widget.LinearLayout
import android.widget.TextView
import androidx.appcompat.app.AppCompatActivity
import androidx.constraintlayout.widget.ConstraintLayout
import androidx.core.content.ContextCompat
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView

// Main Activity for the Navigation Screen
class NavigationActivity : AppCompatActivity() {

    // Define colors for day/night mode
    private val DAY_BG_COLOR = Color.parseColor("#F5F0E1") // Beige color for day mode
    private val NIGHT_BG_COLOR = Color.parseColor("#121212") // Dark color for night mode
    
    // POI types
    enum class PoiType {
        TRUCK_STOP, REST_AREA, TOLL, TOLL_BRIDGE, ROADWORK, 
        ACCIDENT, TRAFFIC_CONTROL, WEIGHT_STATION
    }
    
    // POI data class with position information
    data class PointOfInterest(
        val type: PoiType,
        val name: String,
        val distance: Float, // in km
        val isOnSameDirection: Boolean // true if on same side of road, false if opposite
    )

    private lateinit var mapView: FrameLayout
    private lateinit var rightSidebar: LinearLayout
    private lateinit var poiRecyclerView: RecyclerView
    private lateinit var cancelRouteButton: ImageButton
    private var isDayMode = true
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_navigation)
        
        // Initialize UI components
        mapView = findViewById(R.id.map_view)
        rightSidebar = findViewById(R.id.right_sidebar)
        poiRecyclerView = findViewById(R.id.poi_recycler_view)
        cancelRouteButton = findViewById(R.id.cancel_route_button)
        
        // Set the UI mode based on time of day (can be determined by system or GPS)
        setDayNightMode(isDayMode)
        
        // Setup POI sidebar recycler view
        setupPoiSidebar()
        
        // Setup cancel route button without confirmation
        cancelRouteButton.setOnClickListener {
            cancelNavigationRoute()
        }
    }
    
    private fun setDayNightMode(isDay: Boolean) {
        isDayMode = isDay
        
        if (isDay) {
            // Set day mode colors
            mapView.setBackgroundColor(DAY_BG_COLOR)
            rightSidebar.setBackgroundColor(Color.parseColor("#FFFFFF"))
        } else {
            // Set night mode colors
            mapView.setBackgroundColor(NIGHT_BG_COLOR)
            rightSidebar.setBackgroundColor(Color.parseColor("#333333"))
        }
    }
    
    private fun setupPoiSidebar() {
        // Sample POI data - in a real app this would come from your navigation system
        val pois = listOf(
            PointOfInterest(PoiType.TRUCK_STOP, "Big Rig Stop", 29.0f, true),
            PointOfInterest(PoiType.REST_AREA, "Highway Rest", 11.0f, true),
            PointOfInterest(PoiType.WEIGHT_STATION, "County Weigh Station", 5.7f, true),
            PointOfInterest(PoiType.TOLL, "River Toll", 0.7f, false)
        )
        
        poiRecyclerView.layoutManager = LinearLayoutManager(this)
        poiRecyclerView.adapter = PoiAdapter(this, pois, isDayMode)
    }
    
    private fun cancelNavigationRoute() {
        // Immediately cancel navigation without confirmation
        // In a real implementation, this would stop navigation and return to the previous screen
        // or to the map overview mode
        finish() // For demo purposes, we just finish the activity
    }
    
    // Adapter for the POI sidebar
    inner class PoiAdapter(
        private val context: Context,
        private val pois: List<PointOfInterest>,
        private val isDayMode: Boolean
    ) : RecyclerView.Adapter<PoiAdapter.PoiViewHolder>() {
        
        inner class PoiViewHolder(view: View) : RecyclerView.ViewHolder(view) {
            val poiIcon: ImageView = view.findViewById(R.id.poi_icon)
            val poiDistance: TextView = view.findViewById(R.id.poi_distance)
            val poiContainer: ConstraintLayout = view.findViewById(R.id.poi_container)
        }
        
        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): PoiViewHolder {
            val view = LayoutInflater.from(context)
                .inflate(R.layout.item_poi, parent, false)
            return PoiViewHolder(view)
        }
        
        override fun getItemCount() = pois.size
        
        override fun onBindViewHolder(holder: PoiViewHolder, position: Int) {
            val poi = pois[position]
            
            // Set POI icon based on type
            holder.poiIcon.setImageResource(getPoiIconResource(poi.type))
            
            // Set distance text
            holder.poiDistance.text = "${poi.distance} km"
            
            // Position the POI indicator based on direction (same or opposite side)
            val params = holder.poiContainer.layoutParams as FrameLayout.LayoutParams
            if (poi.isOnSameDirection) {
                // Place on right side of sidebar
                params.gravity = Gravity.END
            } else {
                // Place on left side of sidebar
                params.gravity = Gravity.START
            }
            holder.poiContainer.layoutParams = params
            
            // Set colors based on day/night mode
            if (isDayMode) {
                holder.poiDistance.setTextColor(Color.BLACK)
            } else {
                holder.poiDistance.setTextColor(Color.WHITE)
            }
        }
        
        private fun getPoiIconResource(type: PoiType): Int {
            return when (type) {
                PoiType.TRUCK_STOP -> R.drawable.ic_truck_stop
                PoiType.REST_AREA -> R.drawable.ic_rest_area
                PoiType.TOLL -> R.drawable.ic_toll
                PoiType.TOLL_BRIDGE -> R.drawable.ic_toll_bridge
                PoiType.ROADWORK -> R.drawable.ic_roadwork
                PoiType.ACCIDENT -> R.drawable.ic_accident
                PoiType.TRAFFIC_CONTROL -> R.drawable.ic_traffic_control
                PoiType.WEIGHT_STATION -> R.drawable.ic_weight_station
            }
        }
    }
}

// XML Layout for the navigation activity
/* activity_navigation.xml:
<?xml version="1.0" encoding="utf-8"?>
<androidx.constraintlayout.widget.ConstraintLayout 
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <!-- Map View -->
    <FrameLayout
        android:id="@+id/map_view"
        android:layout_width="0dp"
        android:layout_height="0dp"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        android:background="#F5F0E1">
        
        <!-- Map implementation will go here -->
        
    </FrameLayout>

    <!-- Left Turn Instruction Panel -->
    <androidx.cardview.widget.CardView
        android:id="@+id/turn_instruction_panel"
        android:layout_width="200dp"
        android:layout_height="wrap_content"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        android:layout_margin="16dp"
        app:cardCornerRadius="8dp"
        app:cardElevation="4dp"
        android:backgroundTint="#00796B">

        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:padding="8dp">

            <ImageView
                android:id="@+id/turn_arrow"
                android:layout_width="40dp"
                android:layout_height="40dp"
                android:src="@drawable/ic_turn_left" />

            <TextView
                android:id="@+id/turn_distance"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="700 metres"
                android:textColor="#FFFFFF"
                android:textSize="24sp"
                android:textStyle="bold" />

            <TextView
                android:id="@+id/road_name"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="Hillsborough Rd"
                android:textColor="#FFFFFF"
                android:textSize="18sp" />

            <TextView
                android:id="@+id/road_number"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="114"
                android:textColor="#FFFFFF"
                android:textSize="16sp"
                android:background="@drawable/road_number_bg"
                android:padding="4dp" />
        </LinearLayout>
    </androidx.cardview.widget.CardView>

    <!-- Right Sidebar with POIs -->
    <LinearLayout
        android:id="@+id/right_sidebar"
        android:layout_width="70dp"
        android:layout_height="0dp"
        android:orientation="vertical"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        android:background="#FFFFFF">

        <!-- ETA info -->
        <LinearLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:orientation="vertical"
            android:gravity="center"
            android:padding="8dp">

            <TextView
                android:id="@+id/eta_time"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="7:38 PM"
                android:textSize="18sp"
                android:textStyle="bold" />

            <TextView
                android:id="@+id/remaining_time"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="2hr 57min"
                android:textSize="14sp" />

            <TextView
                android:id="@+id/remaining_distance"
                android:layout_width="wrap_content"
                android:layout_height="wrap_content"
                android:text="290 km"
                android:textSize="14sp"
                android:textStyle="bold" />
        </LinearLayout>

        <!-- Divider -->
        <View
            android:layout_width="match_parent"
            android:layout_height="1dp"
            android:background="#DDDDDD" />

        <!-- POI Recycler View -->
        <androidx.recyclerview.widget.RecyclerView
            android:id="@+id/poi_recycler_view"
            android:layout_width="match_parent"
            android:layout_height="0dp"
            android:layout_weight="1" />

        <!-- Cancel Navigation Button -->
        <FrameLayout
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:padding="8dp">

            <ImageButton
                android:id="@+id/cancel_route_button"
                android:layout_width="48dp"
                android:layout_height="48dp"
                android:layout_gravity="center"
                android:background="@drawable/circular_button_bg"
                android:src="@drawable/ic_cancel"
                android:contentDescription="Cancel route" />
        </FrameLayout>
    </LinearLayout>

</androidx.constraintlayout.widget.ConstraintLayout>
*/

// XML Layout for individual POI items in the sidebar
/* item_poi.xml:
<?xml version="1.0" encoding="utf-8"?>
<FrameLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:padding="4dp">

    <androidx.constraintlayout.widget.ConstraintLayout
        android:id="@+id/poi_container"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_gravity="end">

        <ImageView
            android:id="@+id/poi_icon"
            android:layout_width="32dp"
            android:layout_height="32dp"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toTopOf="parent"
            android:src="@drawable/ic_truck_stop"
            android:contentDescription="POI Icon" />

        <TextView
            android:id="@+id/poi_distance"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:text="29 km"
            android:textSize="12sp"
            app:layout_constraintEnd_toEndOf="parent"
            app:layout_constraintStart_toStartOf="parent"
            app:layout_constraintTop_toBottomOf="@+id/poi_icon" />

    </androidx.constraintlayout.widget.ConstraintLayout>
</FrameLayout>
*/

// CircleButton background
/* circular_button_bg.xml:
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="oval">
    <solid android:color="#333333" />
</shape>
*/

// Road number background
/* road_number_bg.xml:
<?xml version="1.0" encoding="utf-8"?>
<shape xmlns:android="http://schemas.android.com/apk/res/android"
    android:shape="rectangle">
    <solid android:color="#FFFFFF" />
    <corners android:radius="4dp" />
    <stroke android:color="#000000" android:width="1dp" />
</shape>
*/

// Implementation for the map functionality
class MapController {
    // This would integrate with your map provider API (Google Maps, MapBox, etc.)
    // For your King Road app, this would handle the actual map rendering, routing, etc.
    
    interface MapEventListener {
        fun onPoisChanged(pois: List<NavigationActivity.PointOfInterest>)
        fun onRouteProgress(remainingDistance: Float, remainingTime: Int)
        fun onNextTurn(distance: Float, roadName: String, roadNumber: String, turnType: TurnType)
    }
    
    enum class TurnType {
        LEFT, RIGHT, STRAIGHT, U_TURN, EXIT_LEFT, EXIT_RIGHT,
        KEEP_LEFT, KEEP_RIGHT, MERGE_LEFT, MERGE_RIGHT
    }
    
    // Methods would be implemented to handle map functionality
}

// Theme Manager to handle the day/night transitions
class ThemeManager(private val context: Context) {
    
    fun isDayTime(): Boolean {
        // In a real app, this would check time of day or light sensor
        // For truck GPS, could also base on sunrise/sunset at current GPS location
        return true 
    }
    
    fun getDayThemeColors(): Map<String, Int> {
        return mapOf(
            "mapBackground" to Color.parseColor("#F5F0E1"), // Beige
            "roadPrimary" to Color.parseColor("#FFFFFF"),
            "roadSecondary" to Color.parseColor("#EEEEEE"),
            "waterColor" to Color.parseColor("#B3D9FF"),
            "landColor" to Color.parseColor("#E8E0D0"),
            "textPrimary" to Color.BLACK,
            "textSecondary" to Color.GRAY
        )
    }
    
    fun getNightThemeColors(): Map<String, Int> {
        return mapOf(
            "mapBackground" to Color.parseColor("#121212"),
            "roadPrimary" to Color.parseColor("#3C3C3C"),
            "roadSecondary" to Color.parseColor("#2A2A2A"),
            "waterColor" to Color.parseColor("#102840"),
            "landColor" to Color.parseColor("#1A1A1A"),
            "textPrimary" to Color.WHITE,
            "textSecondary" to Color.LTGRAY
        )
    }
}

// POI Manager to handle truck-specific points of interest
class PoiManager(private val context: Context) {
    
    // This would fetch POIs from your database or API
    fun getPoiIconForType(type: NavigationActivity.PoiType): Int {
        return when (type) {
            NavigationActivity.PoiType.TRUCK_STOP -> R.drawable.ic_truck_stop
            NavigationActivity.PoiType.REST_AREA -> R.drawable.ic_rest_area
            NavigationActivity.PoiType.TOLL -> R.drawable.ic_toll
            NavigationActivity.PoiType.TOLL_BRIDGE -> R.drawable.ic_toll_bridge
            NavigationActivity.PoiType.ROADWORK -> R.drawable.ic_roadwork
            NavigationActivity.PoiType.ACCIDENT -> R.drawable.ic_accident
            NavigationActivity.PoiType.TRAFFIC_CONTROL -> R.drawable.ic_traffic_control
            NavigationActivity.PoiType.WEIGHT_STATION -> R.drawable.ic_weight_station
        }
    }
    
    // This would determine if a POI is on the same or opposite side of the road
    fun isPoiOnSameDirection(poiId: String, currentDirection: Float): Boolean {
        // In a real implementation, this would check the POI location relative to the road direction
        // This is just a placeholder
        return true
    }
}