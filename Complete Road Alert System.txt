import React, { useState } from 'react';
import { 
  AlertTriangle, 
  Car, 
  Shield, 
  X,
  AlertCircle,
  MapPin,
  Construction,
  Ban,
  Radio,
  Clock,
  Activity,
  Map
} from 'lucide-react';

const RoadAlertSystem = () => {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState('road');

  const mainAlerts = [
    {
      id: 'accident',
      icon: AlertTriangle,
      label: 'Accident',
      color: 'bg-red-500',
      textColor: 'text-red-800',
      bgHover: 'hover:bg-red-200'
    },
    {
      id: 'stopped_vehicle',
      icon: Car,
      label: 'Carro Parado',
      color: 'bg-orange-500',
      textColor: 'text-orange-800',
      bgHover: 'hover:bg-orange-200'
    }
  ];

  const roadConditions = [
    {
      id: 'police',
      icon: Shield,
      label: 'Police',
      color: 'bg-blue-500'
    },
    {
      id: 'traffic',
      icon: Car,
      label: 'Traffic',
      color: 'bg-orange-500'
    },
    {
      id: 'danger',
      icon: AlertTriangle,
      label: 'Danger',
      color: 'bg-yellow-500'
    },
    {
      id: 'inspection',
      icon: Shield,
      label: 'Inspection',
      color: 'bg-blue-500'
    },
    {
      id: 'closure',
      icon: Ban,
      label: 'Closure',
      color: 'bg-red-500'
    },
    {
      id: 'construction',
      icon: Construction,
      label: 'Construction',
      color: 'bg-orange-500'
    }
  ];

  const mapIssues = [
    {
      id: 'wrong_destination',
      icon: MapPin,
      label: 'Wrong Destination',
      color: 'bg-red-500'
    },
    {
      id: 'not_truck_route',
      icon: Ban,
      label: 'Not a Truck Route',
      color: 'bg-orange-500'
    },
    {
      id: 'detour',
      icon: Map,
      label: 'Detour',
      color: 'bg-yellow-500'
    },
    {
      id: 'no_turns',
      icon: Ban,
      label: 'No Turns Allowed',
      color: 'bg-red-500'
    },
    {
      id: 'no_signal',
      icon: Radio,
      label: 'No Signal',
      color: 'bg-gray-500'
    },
    {
      id: 'glitch',
      icon: AlertCircle,
      label: 'Glitch',
      color: 'bg-red-500'
    },
    {
      id: 'speed_limit',
      icon: Activity,
      label: 'Speed Limit',
      color: 'bg-blue-500'
    },
    {
      id: 'other',
      icon: AlertCircle,
      label: 'Other',
      color: 'bg-gray-500'
    }
  ];

  const handleReport = (type, category) => {
    // Pega a localização atual e direção
    navigator.geolocation.getCurrentPosition((position) => {
      const report = {
        type: type,
        category: category,
        latitude: position.coords.latitude,
        longitude: position.coords.longitude,
        timestamp: new Date().toISOString(),
      };
      
      console.log('New report:', report);
      setIsMenuOpen(false);
    });
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg shadow-xl p-4 m-4 max-w-lg w-full">
        {/* Header */}
        <div className="flex justify-between items-center mb-4">
          <h2 className="text-xl font-bold">Send a report</h2>
          <button 
            onClick={() => setIsMenuOpen(false)}
            className="p-2 hover:bg-gray-100 rounded-full"
          >
            <X className="w-6 h-6" />
          </button>
        </div>

        {/* Main Alerts - Always Visible and Prominent */}
        <div className="mb-6">
          <div className="grid grid-cols-2 gap-4">
            {mainAlerts.map((alert) => {
              const Icon = alert.icon;
              return (
                <button
                  key={alert.id}
                  onClick={() => handleReport(alert.id, 'main')}
                  className={`flex items-center justify-center space-x-2 ${alert.color} 
                    bg-opacity-10 ${alert.textColor} ${alert.bgHover} rounded-lg p-4`}
                >
                  <Icon className="w-6 h-6" />
                  <span className="font-medium">{alert.label}</span>
                </button>
              );
            })}
          </div>
        </div>

        {/* Category Tabs */}
        <div className="flex space-x-4 mb-4">
          <button 
            onClick={() => setSelectedCategory('road')}
            className={`px-4 py-2 rounded-lg ${
              selectedCategory === 'road' 
                ? 'bg-blue-500 text-white' 
                : 'bg-gray-100 text-gray-700'
            }`}
          >
            Road Condition
          </button>
          <button 
            onClick={() => setSelectedCategory('map')}
            className={`px-4 py-2 rounded-lg ${
              selectedCategory === 'map' 
                ? 'bg-blue-500 text-white' 
                : 'bg-gray-100 text-gray-700'
            }`}
          >
            Map Issue
          </button>
        </div>

        {/* Grid of Condition/Issue Options */}
        <div className="grid grid-cols-3 gap-4">
          {(selectedCategory === 'road' ? roadConditions : mapIssues).map((item) => {
            const Icon = item.icon;
            return (
              <button
                key={item.id}
                onClick={() => handleReport(item.id, selectedCategory)}
                className="flex flex-col items-center space-y-2 p-4 rounded-lg hover:bg-gray-100"
              >
                <div className={`${item.color} bg-opacity-10 p-2 rounded-full`}>
                  <Icon className={`w-6 h-6 ${item.color} text-opacity-90`} />
                </div>
                <span className="text-sm text-center">{item.label}</span>
              </button>
            );
          })}
        </div>
      </div>
    </div>
  );
};

export default RoadAlertSystem;