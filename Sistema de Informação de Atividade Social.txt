// Sistema de Informação de Atividade Social
// app/src/main/kotlin/com/kingroad/social

class SocialActivityManager(
    private val poiManager: POIManager,
    private val userPreferences: UserPreferences,
    private val locationService: LocationService
) {
    data class SocialActivityInfo(
        val location: Location,
        val type: Set<ActivityType>,
        val timeRange: TimeRange?,
        val verified: Boolean = false,
        val lastUpdate: Long = System.currentTimeMillis()
    )

    enum class ActivityType {
        TYPE_F,  // Feminino
        TYPE_M   // Masculino
    }

    data class LocationPreference(
        val showInfo: Boolean = false,
        val avoidLocations: Boolean = false,
        val notifyNearby: Boolean = false
    )

    // Obter informações do local
    suspend fun getLocationInfo(
        location: Location,
        radius: Double
    ): List<SocialActivityInfo> {
        // Verificar preferências do usuário
        if (!userPreferences.getSocialInfoPreference()) {
            return emptyList()
        }

        return poiManager.getLocationInfo(location, radius)
            .filter { it.isVerified() }
            .filter { isWithinTimeRange(it) }
    }

    // Verificar se local deve ser evitado
    suspend fun shouldAvoidLocation(
        location: Location
    ): Boolean {
        val preferences = userPreferences.getLocationPreferences()
        if (!preferences.avoidLocations) return false

        val nearbyActivities = getLocationInfo(
            location = location,
            radius = AVOIDANCE_RADIUS
        )

        return nearbyActivities.isNotEmpty()
    }

    // Notificar proximidade
    suspend fun checkProximityAlert(location: Location) {
        val preferences = userPreferences.getLocationPreferences()
        if (!preferences.notifyNearby) return

        val nearbyActivities = getLocationInfo(
            location = location,
            radius = NOTIFICATION_RADIUS
        )

        if (nearbyActivities.isNotEmpty()) {
            notifyNearbyActivity(nearbyActivities)
        }
    }

    // Atualizar informações
    suspend fun updateLocationInfo(
        location: Location,
        activityTypes: Set<ActivityType>
    ) {
        val info = SocialActivityInfo(
            location = location,
            type = activityTypes,
            timeRange = determineTimeRange(location)
        )

        poiManager.updateLocationInfo(info)
    }

    private fun notifyNearbyActivity(
        activities: List<SocialActivityInfo>
    ) {
        // Implementação da notificação
    }

    private fun isWithinTimeRange(
        info: SocialActivityInfo
    ): Boolean {
        val currentTime = System.currentTimeMillis()
        return info.timeRange?.contains(currentTime) ?: true
    }

    companion object {
        const val AVOIDANCE_RADIUS = 500.0  // metros
        const val NOTIFICATION_RADIUS = 1000.0  // metros
        const val UPDATE_INTERVAL = 24 * 60 * 60 * 1000L  // 24 horas em milissegundos
    }
}

// Configurações de usuário
interface UserPreferences {
    fun getSocialInfoPreference(): Boolean
    fun getLocationPreferences(): LocationPreference
    fun updatePreferences(preferences: LocationPreference)
}

// Extensões úteis
fun TimeRange.contains(timestamp: Long): Boolean {
    return timestamp in startTime..endTime
}