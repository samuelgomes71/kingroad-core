import React, { useState, useEffect } from 'react';
import { Search, Navigation, Info, Truck, Share2, Map, Satellite, Mountain } from 'lucide-react';

// Map Mode Components - Implementados internamente
const MapModeToggleButton = ({ onModeChange }) => {
  const [currentMode, setCurrentMode] = useState('standard');
  
  const modes = [
    { id: 'standard', icon: Map, label: 'Normal', color: 'bg-blue-500' },
    { id: 'satellite', icon: Satellite, label: 'Satélite', color: 'bg-green-600' },
    { id: 'terrain', icon: Mountain, label: 'Relevo', color: 'bg-amber-700' }
  ];
  
  const handleModeChange = () => {
    const currentIndex = modes.findIndex(mode => mode.id === currentMode);
    const nextIndex = (currentIndex + 1) % modes.length;
    const nextMode = modes[nextIndex].id;
    
    setCurrentMode(nextMode);
    onModeChange(nextMode);
  };
  
  const currentModeObj = modes.find(mode => mode.id === currentMode);
  
  return (
    <div className="absolute right-4 top-24 z-10">
      <div className="flex flex-col items-center">
        <button
          onClick={handleModeChange}
          className={`${currentModeObj.color} hover:opacity-90 text-white w-12 h-12 rounded-full shadow-lg flex items-center justify-center relative`}
          aria-label={`Alternar para modo ${currentModeObj.label}`}
        >
          {React.createElement(currentModeObj.icon, { size: 24 })}
        </button>
        <span className="mt-1 text-xs font-medium bg-white px-2 py-1 rounded-full shadow text-gray-700">
          {currentModeObj.label}
        </span>
      </div>
    </div>
  );
};

const AdvancedMapModeSelector = ({ onModeChange }) => {
  const [currentMode, setCurrentMode] = useState('standard');
  
  const modes = [
    { id: 'standard', icon: Map, label: 'Normal', color: 'bg-blue-500', description: 'Visualização de ruas e estradas' },
    { id: 'satellite', icon: Satellite, label: 'Satélite', color: 'bg-green-600', description: 'Visualização de imagens de satélite' },
    { id: 'terrain', icon: Mountain, label: 'Relevo', color: 'bg-amber-700', description: 'Visualização com topografia e elevação' }
  ];
  
  const handleModeSelect = (modeId) => {
    setCurrentMode(modeId);
    onModeChange(modeId);
  };
  
  return (
    <div className="bg-white rounded-lg shadow-lg p-2 mb-4">
      <div className="grid grid-cols-3 gap-2">
        {modes.map(mode => (
          <button
            key={mode.id}
            onClick={() => handleModeSelect(mode.id)}
            className={`p-2 rounded-lg flex flex-col items-center ${
              currentMode === mode.id 
                ? `${mode.color} text-white` 
                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'
            }`}
          >
            {React.createElement(mode.icon, { size: 20 })}
            <span className="text-xs mt-1 font-medium">{mode.label}</span>
          </button>
        ))}
      </div>
      
      <div className="mt-2 text-xs text-gray-600 px-2">
        {modes.find(m => m.id === currentMode)?.description}
      </div>
    </div>
  );
};

const SatelliteViewControls = ({ onZoomChange, onTiltChange, currentMode }) => {
  const isSatelliteMode = ['satellite', 'hybrid'].includes(currentMode);
  
  if (!isSatelliteMode) return null;
  
  return (
    <div className="absolute left-4 bottom-24 z-10">
      <div className="bg-white bg-opacity-80 rounded-lg shadow-lg p-3">
        <div className="mb-3">
          <label className="text-xs text-gray-700 block mb-1">Zoom</label>
          <input 
            type="range" 
            min="12" 
            max="22" 
            defaultValue="18"
            onChange={(e) => onZoomChange(Number(e.target.value))}
            className="w-32"
          />
        </div>
        
        <div>
          <label className="text-xs text-gray-700 block mb-1">Inclinação</label>
          <input 
            type="range" 
            min="0" 
            max="60" 
            defaultValue="0"
            onChange={(e) => onTiltChange(Number(e.target.value))}
            className="w-32"
          />
        </div>
      </div>
    </div>
  );
};

// Componente principal
const KingRoadNavigationSystem = () => {
  const [mapMode, setMapMode] = useState('standard');
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState([]);
  const [selectedDestination, setSelectedDestination] = useState(null);
  const [isNavigating, setIsNavigating] = useState(false);
  const [zoomLevel, setZoomLevel] = useState(18);
  const [tiltLevel, setTiltLevel] = useState(0);

  // Função para alterar o modo do mapa
  const handleMapModeChange = (mode) => {
    setMapMode(mode);
    
    // Ajusta o zoom e inclinação com base no modo
    if (mode === 'satellite') {
      setZoomLevel(20);
      setTiltLevel(45);
    } else if (mode === 'terrain') {
      setZoomLevel(16);
      setTiltLevel(60);
    } else {
      setZoomLevel(16);
      setTiltLevel(0);
    }
  };

  // Simulação de busca
  const handleSearch = () => {
    // Aqui seria a integração com a API de busca
    const mockResults = [
      {
        id: '1',
        name: 'Warehouse ABC',
        address: '123 Industrial Rd, Springfield',
        hasEntranceInfo: true,
        entranceCoordinates: { lat: 37.7749, lng: -122.4194 },
        truckAccess: {
          instructions: 'Use a entrada lateral na Rua 2',
          maxHeight: '4.5m',
          maxWeight: '40t',
          parkingAvailable: true
        }
      },
      {
        id: '2',
        name: 'Distribution Center XYZ',
        address: '456 Logistics Ave, Metropolis',
        hasEntranceInfo: true,
        entranceCoordinates: { lat: 37.7749, lng: -122.4194 },
        truckAccess: {
          instructions: 'Portão 3 para caminhões grandes',
          maxHeight: '5.0m',
          maxWeight: '44t',
          parkingAvailable: true
        }
      }
    ];
    
    setSearchResults(mockResults);
  };

  // Inicia navegação
  const startNavigation = (destination) => {
    setSelectedDestination(destination);
    setIsNavigating(true);
    setIsSearchOpen(false);
  };

  return (
    <div className="relative h-screen w-full bg-gray-100">
      {/* Mapa Principal */}
      <div 
        className="w-full h-full" 
        style={{ 
          background: mapMode === 'standard' 
            ? '#e5e5f0' 
            : mapMode === 'satellite'
            ? '#263238'
            : '#dddfd4',
          backgroundSize: 'cover',
          backgroundPosition: 'center'
        }}
      >
        {/* Simulação de conteúdo do mapa */}
        {mapMode === 'standard' && (
          <div className="text-center pt-10 text-gray-400">Mapa Padrão</div>
        )}
        {mapMode === 'satellite' && (
          <div className="text-center pt-10 text-white">Visualização de Satélite</div>
        )}
        {mapMode === 'terrain' && (
          <div className="text-center pt-10 text-gray-700">Mapa de Relevo</div>
        )}
      </div>

      {/* Botão de alternar modo de mapa - sempre visível */}
      <MapModeToggleButton onModeChange={handleMapModeChange} />

      {/* Controles de satélite - visível apenas em modo satélite */}
      <SatelliteViewControls 
        currentMode={mapMode} 
        onZoomChange={setZoomLevel} 
        onTiltChange={setTiltLevel} 
      />

      {/* Botão de busca na tela principal */}
      {!isSearchOpen && !isNavigating && (
        <div className="absolute top-4 left-4 right-4">
          <button 
            onClick={() => setIsSearchOpen(true)}
            className="w-full bg-white shadow-lg rounded-lg p-3 text-left text-gray-400 flex items-center"
          >
            <Search className="w-5 h-5 mr-2" />
            Buscar cliente, empresa ou endereço...
          </button>
        </div>
      )}

      {/* Tela de busca */}
      {isSearchOpen && (
        <div className="absolute inset-0 bg-white z-10">
          <div className="p-4">
            <div className="flex items-center mb-4 space-x-2">
              <button 
                onClick={() => setIsSearchOpen(false)}
                className="text-gray-600 hover:text-gray-800"
              >
                ← Voltar
              </button>
              <h2 className="text-lg font-bold flex-1">Buscar Destino</h2>
            </div>

            {/* Seletor avançado de modo de mapa */}
            <AdvancedMapModeSelector onModeChange={handleMapModeChange} />

            {/* Campo de busca */}
            <div className="relative mb-4">
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                placeholder="Nome do cliente ou endereço..."
                className="w-full p-3 border rounded-lg pr-10"
              />
              <button 
                onClick={handleSearch}
                className="absolute right-3 top-3 text-blue-500"
              >
                <Search className="w-5 h-5" />
              </button>
            </div>

            {/* Resultados de busca */}
            <div className="space-y-3 overflow-auto max-h-[calc(100vh-200px)]">
              {searchResults.map(result => (
                <div 
                  key={result.id}
                  className="bg-white border rounded-lg p-4 shadow-sm"
                >
                  <div className="flex justify-between items-start">
                    <div>
                      <h3 className="font-bold">{result.name}</h3>
                      <p className="text-gray-600 text-sm">{result.address}</p>
                    </div>
                    {result.hasEntranceInfo && (
                      <div className="bg-green-100 text-green-800 px-2 py-1 rounded text-xs font-medium flex items-center">
                        <Truck className="w-3 h-3 mr-1" />
                        Entrada para Caminhões
                      </div>
                    )}
                  </div>

                  {/* Visualização do mapa para este resultado */}
                  <div 
                    className="mt-3 h-40 w-full rounded-lg overflow-hidden relative bg-gray-200"
                    style={{ 
                      background: mapMode === 'standard' 
                        ? '#e5e5f0' 
                        : mapMode === 'satellite'
                        ? '#263238'
                        : '#dddfd4'
                    }}
                  >
                    {/* Simulação de visualização */}
                    <div className="h-full w-full flex items-center justify-center">
                      {mapMode === 'standard' && <Map className="w-10 h-10 text-gray-400" />}
                      {mapMode === 'satellite' && <Satellite className="w-10 h-10 text-gray-300" />}
                      {mapMode === 'terrain' && <Mountain className="w-10 h-10 text-gray-500" />}
                    </div>
                    
                    {/* Indicador de entrada para caminhões */}
                    {result.hasEntranceInfo && (
                      <div className="absolute top-2 right-2 bg-blue-600 text-white p-1 rounded text-xs">
                        Entrada de Caminhões ↑
                      </div>
                    )}
                  </div>

                  {/* Informações de acesso para caminhões */}
                  {result.truckAccess && (
                    <div className="mt-3 bg-blue-50 p-3 rounded-lg text-sm">
                      <h4 className="font-medium text-blue-800 mb-1">Informações para Caminhões:</h4>
                      <p className="text-blue-900">{result.truckAccess.instructions}</p>
                      <div className="grid grid-cols-2 gap-2 mt-2">
                        <div>Altura: {result.truckAccess.maxHeight}</div>
                        <div>Peso: {result.truckAccess.maxWeight}</div>
                      </div>
                    </div>
                  )}

                  {/* Botões de ação */}
                  <div className="mt-3 flex space-x-2">
                    <button 
                      onClick={() => startNavigation(result)}
                      className="flex-1 bg-blue-500 hover:bg-blue-600 text-white py-2 rounded-lg flex items-center justify-center"
                    >
                      <Navigation className="w-4 h-4 mr-1" />
                      Navegar
                    </button>
                    <button 
                      className="bg-gray-100 hover:bg-gray-200 text-gray-700 py-2 px-3 rounded-lg flex items-center justify-center"
                    >
                      <Info className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        </div>
      )}

      {/* Tela de Navegação */}
      {isNavigating && (
        <div className="absolute bottom-4 left-4 right-4 bg-white shadow-lg rounded-lg p-4">
          <div className="flex justify-between items-center">
            <div>
              <h3 className="font-bold">{selectedDestination.name}</h3>
              <div className="text-sm text-gray-600">Chegada em 45 min (14:30)</div>
            </div>
            <button 
              className="bg-blue-500 hover:bg-blue-600 text-white p-2 rounded-full"
              onClick={() => {/* Abre modal de compartilhamento */}}
            >
              <Share2 className="w-5 h-5" />
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default KingRoadNavigationSystem;